WEBVTT

1
00:00:00.000 --> 00:00:05.320
A typical first step in analyzing your data,

2
00:00:05.320 --> 00:00:05.360


3
00:00:05.360 --> 00:00:08.280
is getting to know your data in the first place.

4
00:00:08.280 --> 00:00:13.360
For the NumPy arrays from before, this is pretty easy, because it isn't a lot of data.

5
00:00:13.360 --> 00:00:19.320
However, as a data scientist, you'll be crunching thousands, if not millions or billions of numbers.

6
00:00:19.320 --> 00:00:19.320


7
00:00:19.320 --> 00:00:19.320


8
00:00:19.320 --> 00:00:25.720
Imagine you conduct a city-wide survey where you ask 5000 adults about their height and weight.

9
00:00:25.720 --> 00:00:31.800
You end up with something like this: a 2D numpy array, which I named np_city, that has 5000

10
00:00:31.800 --> 00:00:37.680
rows, corresponding to the 5000 people, and two columns, corresponding to the height and the weight.

11
00:00:37.680 --> 00:00:37.680


12
00:00:37.680 --> 00:00:38.600


13
00:00:38.600 --> 00:00:42.800
Simply staring at these numbers like a zombie won't give you any insights.

14
00:00:42.800 --> 00:00:50.720
What you can do, though, is generate summarizing statistics about your data.

15
00:00:50.720 --> 00:00:50.720


16
00:00:50.720 --> 00:00:50.720


17
00:00:50.720 --> 00:00:54.080
Aside from an efficient data structure for number crunching,

18
00:00:54.080 --> 00:00:57.840
it happens that NumPy is also good at doing these kinds of things.

19
00:00:57.840 --> 00:00:57.840


20
00:00:57.840 --> 00:00:58.600


21
00:00:58.600 --> 00:01:05.880
For starters, you can try to find out the average height of these 5000 people, with NumPy's mean function.

22
00:01:05.880 --> 00:01:10.520
Because it's a function from the NumPy package, don't forget to start with np.

23
00:01:10.520 --> 00:01:10.560
.

24
00:01:10.560 --> 00:01:10.560


25
00:01:10.560 --> 00:01:10.600


26
00:01:10.600 --> 00:01:17.280
Of course, I first had to do a subsetting operation to get the height column from the 2D array.

27
00:01:17.280 --> 00:01:22.520
It appears that on average, people are 1-point-75 meters tall.

28
00:01:22.520 --> 00:01:24.280
What about the median height?

29
00:01:24.280 --> 00:01:29.360
This is the height of the middle person if you sort all persons from small to tall.

30
00:01:29.360 --> 00:01:33.520
Instead of writing complicated python code to figure this out, you can simply use

31
00:01:33.520 --> 00:01:35.720
NumPy's median function:

32
00:01:35.720 --> 00:01:35.720


33
00:01:35.720 --> 00:01:39.240
You can do similar things for the weight column in np_city.

34
00:01:39.240 --> 00:01:44.360
Often, these summarizing statistics will provide you with a "sanity check" of your data.

35
00:01:44.360 --> 00:01:50.120
If you end up with a average weight of 2000 kilograms, your measurements are most likely incorrect.

36
00:01:50.120 --> 00:01:50.120


37
00:01:50.120 --> 00:01:50.120


38
00:01:50.120 --> 00:01:54.320
Apart from mean and median, there's also other functions,

39
00:01:54.320 --> 00:01:54.320


40
00:01:54.320 --> 00:01:55.720
like corrcoeff to

41
00:01:55.720 --> 00:01:58.640
check if for example height and weight are correlated,

42
00:01:58.640 --> 00:01:59.000


43
00:01:59.000 --> 00:02:01.320
and std, for standard deviation.

44
00:02:01.320 --> 00:02:01.320


45
00:02:01.320 --> 00:02:02.320


46
00:02:02.320 --> 00:02:10.640
NumPy also features more basic functions, such as sum and sort, which also exist in the basic Python distribution.

47
00:02:10.640 --> 00:02:14.120
However, the big difference here is speed.

48
00:02:14.120 --> 00:02:20.680
Because NumPy enforces a single data type in an array, it can drastically speed up the calculations.

49
00:02:20.680 --> 00:02:20.680


50
00:02:20.680 --> 00:02:20.680


51
00:02:20.680 --> 00:02:25.080
Just a sidenote here: If you're wondering how I came up

52
00:02:25.080 --> 00:02:30.040
with the data in this video: We simulated it with NumPy functions!

53
00:02:30.040 --> 00:02:35.720
I sampled two random distributions 5000 times to create the height and

54
00:02:35.720 --> 00:02:42.080
weight arrays, and then used column_stack to paste them together as two columns.

55
00:02:42.080 --> 00:02:46.120
Another awesome thing that NumPy can do!

56
00:02:46.120 --> 00:02:46.120


57
00:02:46.120 --> 00:02:48.040


58
00:02:48.040 --> 00:02:53.960
Another great tool to get some sense of your data is to visualize it, but that's something for the next course also.

59
00:02:53.960 --> 00:02:53.960


60
00:02:53.960 --> 00:02:53.960


61
00:02:53.960 --> 00:03:08.400
First, head over to the exercises to learn how to explore your NumPy arrays!

