WEBVTT

1
00:00:00.000 --> 00:00:04.680
Well done you legend!

2
00:00:04.680 --> 00:00:08.720
Let's now recreate the numpy arrays from the previous video.

3
00:00:08.720 --> 00:00:08.720


4
00:00:08.720 --> 00:00:08.720


5
00:00:08.720 --> 00:00:15.720
If you ask for the type of these arrays, Python tells you that they are numpy-dot-ndarray.

6
00:00:15.720 --> 00:00:20.640
numpy dot tells you it's a type that was defined in the numpy package.

7
00:00:20.640 --> 00:00:23.760
ndarray stands for n-dimensional array.

8
00:00:23.760 --> 00:00:29.280
The arrays np_height and np_weight are one-dimensional arrays, but it's perfectly

9
00:00:29.280 --> 00:00:34.800
possible to create 2 dimensional, three dimensional, heck even seven dimensional arrays!

10
00:00:34.800 --> 00:00:37.600
Let's stick to 2 in this video though.

11
00:00:37.600 --> 00:00:37.640


12
00:00:37.640 --> 00:00:37.640


13
00:00:37.640 --> 00:00:43.000
You can create a 2D numpy array from a regular Python list of lists.

14
00:00:43.000 --> 00:00:50.040
Let's try to create one numpy array for all height and weight data of your family, like this.

15
00:00:50.040 --> 00:00:50.080


16
00:00:50.080 --> 00:00:50.080


17
00:00:50.080 --> 00:00:56.800
If you print out np_2d now, you'll see that it is a rectangular data structure:

18
00:00:56.800 --> 00:01:02.800
Each sublist in the list, corresponds to a row in the two dimensional numpy array.

19
00:01:02.800 --> 00:01:09.800
From np_2d-dot-shape, you can see that we indeed have 2 rows and 5 columns.

20
00:01:09.800 --> 00:01:19.720
shape is a so-called attribute of the np2d array, that can

21
00:01:19.720 --> 00:01:32.600
give you more information about what the data structure looks like.

22
00:01:32.600 --> 00:01:32.600


23
00:01:32.600 --> 00:01:32.640


24
00:01:32.640 --> 00:01:40.080
Also for 2D arrays, the NumPy rule applies: an array can only contain a single type.

25
00:01:40.080 --> 00:01:44.640
If you change one float to be string, all the array elements

26
00:01:44.640 --> 00:01:48.600
will be coerced to strings, to end up with a homogeneous array.

27
00:01:48.600 --> 00:01:48.600


28
00:01:48.600 --> 00:01:50.000


29
00:01:50.000 --> 00:01:55.240
You can think of the 2D numpy array as an improved list of lists: you can perform

30
00:01:55.240 --> 00:02:01.160
calculations on the arrays, like I showed before, and you can do more advanced ways of subsetting.

31
00:02:01.160 --> 00:02:01.160


32
00:02:01.160 --> 00:02:01.160


33
00:02:01.160 --> 00:02:06.120
Suppose you want the first row, and then the third element in that row.

34
00:02:06.120 --> 00:02:10.840
To select the row, you need the index 0 in square brackets.

35
00:02:10.840 --> 00:02:12.680
Don't forget about zero indexing.

36
00:02:12.680 --> 00:02:12.680


37
00:02:12.680 --> 00:02:12.680


38
00:02:12.680 --> 00:02:17.160
To then select the third element, you can extend the same call

39
00:02:17.160 --> 00:02:20.200
with another pair of brackets, this time with the index 2,

40
00:02:20.200 --> 00:02:20.200


41
00:02:20.200 --> 00:02:21.480
like this.

42
00:02:21.480 --> 00:02:25.600
Basically you're selecting the row, and then from that row do another selection.

43
00:02:25.600 --> 00:02:25.600


44
00:02:25.600 --> 00:02:25.600


45
00:02:25.600 --> 00:02:32.120
There's also an alternative way of subsetting, using single square brackets and a comma.

46
00:02:32.120 --> 00:02:35.600
This call returns the exact same value as before.

47
00:02:35.600 --> 00:02:41.080
The value before the comma specifies the row, the value after the comma specifies the column.

48
00:02:41.080 --> 00:02:46.560
The intersection of the rows and columns you specified, are returned.

49
00:02:46.560 --> 00:02:51.560
Once you get used to it, this syntax is more intuitive and opens up more possibilities.

50
00:02:51.560 --> 00:02:51.560


51
00:02:51.560 --> 00:02:52.080


52
00:02:52.080 --> 00:02:57.120
Suppose you want to select the height and weight of the second and third family member.

53
00:02:57.120 --> 00:03:00.280
You want both rows, so you put in a colon before the comma.

54
00:03:00.280 --> 00:03:06.960
You only want the second and third column, so you put in the indices 1 to 3 after the comma.

55
00:03:06.960 --> 00:03:10.640
Remember that the third index is not included here.

56
00:03:10.640 --> 00:03:14.720
The intersection gives us a 2D array with 2 rows and 2 columns:

57
00:03:14.720 --> 00:03:15.440


58
00:03:15.440 --> 00:03:17.800
Similarly, you can select the

59
00:03:17.800 --> 00:03:24.000
weight of all family members like this: you only want the second row, so put 1 before the comma.

60
00:03:24.000 --> 00:03:28.400
You want all columns, so you use a colon after the comma.

61
00:03:28.400 --> 00:03:31.640
The intersection gives us the entire second row.

62
00:03:31.640 --> 00:03:31.640


63
00:03:31.640 --> 00:03:31.640


64
00:03:31.640 --> 00:03:41.840
Finally, 2D numpy arrays enable you to do element-wise calculations, the same way you did it with 1D numpy arrays.

65
00:03:41.840 --> 00:03:42.600
That's something

66
00:03:42.600 --> 00:03:42.600


67
00:03:42.600 --> 00:03:58.360
you can experiment with in the exercises, along with creating and subsetting 2D numpy arrays!

