WEBVTT

1
00:00:00.000 --> 00:00:05.160
Welcome back aspiring Pythonista.

2
00:00:05.160 --> 00:00:10.480
By now, you've played around with different data types, and I hope you've had as much fun as I have.

3
00:00:10.480 --> 00:00:10.480


4
00:00:10.480 --> 00:00:10.480


5
00:00:10.480 --> 00:00:16.600
On the numbers side, there's the float, to represent a real number, and the int, to represent an integer.

6
00:00:16.600 --> 00:00:25.360
Next, we also have str, short for string, to represent text in Python, and bool, which can be either True or False.

7
00:00:25.360 --> 00:00:29.400
You can save these values as a variable, like these examples show.

8
00:00:29.400 --> 00:00:31.920
Each variable then represents a single value.

9
00:00:31.920 --> 00:00:31.920


10
00:00:31.920 --> 00:00:33.080


11
00:00:33.080 --> 00:00:34.360
As a data scientist,

12
00:00:34.360 --> 00:00:34.360


13
00:00:34.360 --> 00:00:37.440
you'll often want to work with many data points.

14
00:00:37.440 --> 00:00:43.040
If you for example want to measure the height of everybody in your family, and store this information

15
00:00:43.040 --> 00:00:49.520
in Python, it would be inconvenient to create a new python variable for each point you collected right?

16
00:00:49.520 --> 00:00:50.680


17
00:00:50.680 --> 00:00:50.720


18
00:00:50.720 --> 00:00:56.040
What you can do instead, is store all this information in a Python list.

19
00:00:56.040 --> 00:00:56.040


20
00:00:56.040 --> 00:00:56.040


21
00:00:56.040 --> 00:00:59.640
You can build such a list with square brackets.

22
00:00:59.640 --> 00:01:04.480
Suppose you asked your two sisters and parents for their height, in meters.

23
00:01:04.480 --> 00:01:06.840
You can build the list as follows:

24
00:01:06.840 --> 00:01:06.840


25
00:01:06.840 --> 00:01:12.040
Of course, also this data structure can be referenced to with a variable.

26
00:01:12.040 --> 00:01:17.560
Simply put the variable name and the equals sign in front, like here.

27
00:01:17.560 --> 00:01:17.560


28
00:01:17.560 --> 00:01:17.560


29
00:01:17.560 --> 00:01:22.640
A list is a way to give a single name to a collection of values.

30
00:01:22.640 --> 00:01:27.480
These values, or elements, can have any type; they can be floats,

31
00:01:27.480 --> 00:01:34.400
integer, booleans, strings, but also more advanced Python types, even lists.

32
00:01:34.400 --> 00:01:34.400


33
00:01:34.400 --> 00:01:34.400


34
00:01:34.400 --> 00:01:38.640
It's perfectly possible for a list to contain different types as well.

35
00:01:38.640 --> 00:01:38.640


36
00:01:38.640 --> 00:01:38.640


37
00:01:38.640 --> 00:01:41.640
Suppose, for example, that you want to add

38
00:01:41.640 --> 00:01:48.880
the names of your sisters and parents to the list, so that you know which height belongs to who.

39
00:01:48.880 --> 00:01:51.080
You can throw in some strings without issues.

40
00:01:51.080 --> 00:01:51.080


41
00:01:51.080 --> 00:01:51.640


42
00:01:51.640 --> 00:01:53.200
But that's not all.

43
00:01:53.200 --> 00:01:58.400
I just told you that lists can also contain lists themselves.

44
00:01:58.400 --> 00:02:05.200
Instead of putting the strings in between the numbers, you can create little sublists for each member of the family.

45
00:02:05.200 --> 00:02:08.640
One for liz, one for emma and so on.

46
00:02:08.640 --> 00:02:13.400
Now, you can tell Python that these sublists are the elements of another list, that I

47
00:02:13.400 --> 00:02:19.680
named fam2: the little lists are wrapped in square brackets and separated with commas.

48
00:02:19.680 --> 00:02:24.520
If you now print out fam2, you see that we have a list of lists.

49
00:02:24.520 --> 00:02:27.360
The main list contains 4 sub-lists.

50
00:02:27.360 --> 00:02:27.360


51
00:02:27.360 --> 00:02:28.240


52
00:02:28.240 --> 00:02:31.040
We're dealing with a new Python type here, next to the

53
00:02:31.040 --> 00:02:34.520
strings, booleans, integers and floats you already know about:

54
00:02:34.520 --> 00:02:34.520


55
00:02:34.520 --> 00:02:36.760
the list.

56
00:02:36.760 --> 00:02:41.800
These calls show that both fam and fam2 are lists.

57
00:02:41.800 --> 00:02:47.960
Remember that I told you that each type has specific functionality and behavior associated?

58
00:02:47.960 --> 00:02:50.920
Well, for lists, this is also true.

59
00:02:50.920 --> 00:02:56.360
Python lists host a bunch of tools to subset and adapt them.

60
00:02:56.360 --> 00:02:58.080
But let's take this step by step,

61
00:02:58.080 --> 00:02:58.360


62
00:02:58.360 --> 00:03:06.360
and have you experiment with list creation first!

