WEBVTT

1
00:00:00.000 --> 00:00:07.880
After you've created your very own Python list, you'll need to know how you can access information in the list.

2
00:00:07.880 --> 00:00:08.480


3
00:00:08.480 --> 00:00:08.480


4
00:00:08.480 --> 00:00:12.400
Python uses the index to do this.

5
00:00:12.400 --> 00:00:15.280
Have a look at the fam list again here.

6
00:00:15.280 --> 00:00:22.000
The first element in the list has index 0, the second element has index 1, and so on.

7
00:00:22.000 --> 00:00:26.880
Suppose that you want to select the height of emma, the float 1-point-68.

8
00:00:26.880 --> 00:00:30.040
It's the fourth element, so it has index 3.

9
00:00:30.040 --> 00:00:34.000
To select it, you use 3 inside square brackets.

10
00:00:34.000 --> 00:00:34.080


11
00:00:34.080 --> 00:00:34.080


12
00:00:34.080 --> 00:00:39.600
Similarly, to select the string "dad" from the list,

13
00:00:39.600 --> 00:00:40.720


14
00:00:40.720 --> 00:00:41.720
which is the

15
00:00:41.720 --> 00:00:49.080
seventh element in the list, you'll need to put the index 6 inside square brackets.

16
00:00:49.080 --> 00:00:49.080


17
00:00:49.080 --> 00:00:49.080


18
00:00:49.080 --> 00:00:53.080
You can also count backwards, using negative indexes.

19
00:00:53.080 --> 00:00:57.480
This is useful if you want to get some elements at the end of your list.

20
00:00:57.480 --> 00:01:02.720
To get your dad's height, for example, you'll need the index -1.

21
00:01:02.720 --> 00:01:06.840
These are the negative indexes for all list elements.

22
00:01:06.840 --> 00:01:06.840


23
00:01:06.840 --> 00:01:07.480


24
00:01:07.480 --> 00:01:11.240
This means that both these lines return the exact same result.

25
00:01:11.240 --> 00:01:12.160


26
00:01:12.160 --> 00:01:12.160


27
00:01:12.160 --> 00:01:15.600
Apart from indexing, there's also something called slicing,

28
00:01:15.600 --> 00:01:15.600


29
00:01:15.600 --> 00:01:15.880
which

30
00:01:15.880 --> 00:01:21.360
allows you to select multiple elements from a list, thus creating a new list.

31
00:01:21.360 --> 00:01:25.720
You can do this by specifying a range, using a colon.

32
00:01:25.720 --> 00:01:29.920
Let's first have another look at the list, and then try this piece of code.

33
00:01:29.920 --> 00:01:29.920


34
00:01:29.920 --> 00:01:29.920


35
00:01:29.920 --> 00:01:33.400
Can you guess what it'll return?

36
00:01:33.400 --> 00:01:38.800
A list with the the float 1-point-68, the string "mom", and the float

37
00:01:38.800 --> 00:01:45.120
1-point-71, corresponding to the 4th, 5th and 6th element in the list maybe?

38
00:01:45.120 --> 00:01:47.680
Let's see what the output is.

39
00:01:47.680 --> 00:01:47.680


40
00:01:47.680 --> 00:01:47.680


41
00:01:47.680 --> 00:01:52.200
Apparently, only the elements with index 3 and 4, get returned.

42
00:01:52.200 --> 00:01:55.440
The element with index 5 is not included.

43
00:01:55.440 --> 00:02:01.760
In general, this is the syntax: the index you specify before the colon, so where the slice

44
00:02:01.760 --> 00:02:11.120
starts, is included, while the index you specify after the colon, where the slice ends, is not.

45
00:02:11.120 --> 00:02:11.120


46
00:02:11.120 --> 00:02:11.120


47
00:02:11.120 --> 00:02:14.520
With this in mind, can you tell what this call will return?

48
00:02:14.520 --> 00:02:14.520


49
00:02:14.520 --> 00:02:15.600


50
00:02:15.600 --> 00:02:19.480
You probably guessed correctly that this call gives you a list with three

51
00:02:19.480 --> 00:02:25.280
elements, corresponding to the elements with index 1, 2 and 3 of the fam list.

52
00:02:25.280 --> 00:02:25.280


53
00:02:25.280 --> 00:02:25.280


54
00:02:25.280 --> 00:02:30.040
You can also choose to just leave out the index before or after the colon.

55
00:02:30.040 --> 00:02:30.560


56
00:02:30.560 --> 00:02:30.560


57
00:02:30.560 --> 00:02:32.320
If you leave out the index where the

58
00:02:32.320 --> 00:02:38.360
slice should begin, you're telling Python to start the slice from index 0, like this example.

59
00:02:38.360 --> 00:02:38.360


60
00:02:38.360 --> 00:02:39.040


61
00:02:39.040 --> 00:02:42.600
If you leave out the index where the slice should end, you include

62
00:02:42.600 --> 00:02:47.240
all elements up to and including the last element in the list, like here.

63
00:02:47.240 --> 00:02:47.240


64
00:02:47.240 --> 00:02:47.240


65
00:02:47.240 --> 00:02:50.560
Now it's time to head over to the exercises,

66
00:02:50.560 --> 00:02:50.560


67
00:02:50.560 --> 00:02:52.000
where you

68
00:02:52.000 --> 00:02:57.520
will continue to work on the list you've created yourself before.

69
00:02:57.520 --> 00:03:07.000
You'll use different subsetting methods to get exactly the piece of information you need!

