WEBVTT

1
00:00:00.000 --> 00:00:04.760
Wow, you're doing super well.

2
00:00:04.760 --> 00:00:10.320
So now, after creation and subsetting, the final piece of the Python lists puzzle

3
00:00:10.320 --> 00:00:10.520
is

4
00:00:10.520 --> 00:00:10.520


5
00:00:10.520 --> 00:00:18.360
manipulation, so ways to change elements in your list, or to add elements to and remove elements from your list.

6
00:00:18.360 --> 00:00:18.360


7
00:00:18.360 --> 00:00:18.360


8
00:00:18.360 --> 00:00:22.440
Changing list elements is pretty straightforward.

9
00:00:22.440 --> 00:00:25.040
You use the same square brackets that we've used to subset

10
00:00:25.040 --> 00:00:30.800
lists, and then assign new elements to it using the equals sign.

11
00:00:30.800 --> 00:00:34.320
Suppose that after another look at fam, you realize that your

12
00:00:34.320 --> 00:00:38.800
dad's height is not up to date anymore, as he's shrinking with age.

13
00:00:38.800 --> 00:00:44.280
Instead of 1-point-89 meters, it should be 1-point-86 meters.

14
00:00:44.280 --> 00:00:51.040
To change this list element, which is at index 7, you can use this line of code.

15
00:00:51.040 --> 00:00:51.040


16
00:00:51.040 --> 00:00:51.040


17
00:00:51.040 --> 00:00:56.000
If you now check out fam, you'll see that the value is updated.

18
00:00:56.000 --> 00:00:56.000


19
00:00:56.000 --> 00:00:56.000


20
00:00:56.000 --> 00:00:59.880
You can even change an entire list slice at once.

21
00:00:59.880 --> 00:01:04.400
To change the elements "liz" and 1-point-73, you access the

22
00:01:04.400 --> 00:01:11.280
first two elements with 0:2, and then assign a new list to it.

23
00:01:11.280 --> 00:01:11.280


24
00:01:11.280 --> 00:01:11.280


25
00:01:11.280 --> 00:01:16.120
Do you still remember how the plus operator was different for strings and integers?

26
00:01:16.120 --> 00:01:16.120


27
00:01:16.120 --> 00:01:16.120


28
00:01:16.120 --> 00:01:19.280
Well, it's again different for lists.

29
00:01:19.280 --> 00:01:26.640
If you use the plus sign with two lists, Python simply pastes together their contents in a single list.

30
00:01:26.640 --> 00:01:31.600
Suppose you want to add your own name and height to the fam height list.

31
00:01:31.600 --> 00:01:32.680
This will do the trick.

32
00:01:32.680 --> 00:01:33.440


33
00:01:33.440 --> 00:01:33.440


34
00:01:33.440 --> 00:01:39.840
Of course, you can also store this new list in a variable, fam_ext for example.

35
00:01:39.840 --> 00:01:40.680


36
00:01:40.680 --> 00:01:40.680


37
00:01:40.680 --> 00:01:47.640
Finally, deleting elements from a list is also pretty straightforward, you'll have to use del here.

38
00:01:47.640 --> 00:01:55.320
Take this line, for example, that deletes the element with index 2, so "emma", from the list.

39
00:01:55.320 --> 00:01:55.320


40
00:01:55.320 --> 00:01:56.040


41
00:01:56.040 --> 00:02:00.480
If you check out fam now, you'll see that the "emma" string is gone.

42
00:02:00.480 --> 00:02:09.360
Because you've removed an index, all elements that came after "emma" scooted over by one index.

43
00:02:09.360 --> 00:02:12.480
If you again run the same line, you're again removing the

44
00:02:12.480 --> 00:02:17.520
element at index 2, which is emma's height, 1-point-68 meters now.

45
00:02:17.520 --> 00:02:19.040


46
00:02:19.040 --> 00:02:19.040


47
00:02:19.040 --> 00:02:21.960
Understanding how Python lists actually work

48
00:02:21.960 --> 00:02:21.960


49
00:02:21.960 --> 00:02:24.520
behind the scenes becomes pretty important now.

50
00:02:24.520 --> 00:02:29.680
What actually happens when you create a new list, x, like this?

51
00:02:29.680 --> 00:02:29.680


52
00:02:29.680 --> 00:02:30.200


53
00:02:30.200 --> 00:02:35.600
Well, in a simplified sense, you're storing a list in your computer memory, and

54
00:02:35.600 --> 00:02:38.400
store the 'address' of that list, so

55
00:02:38.400 --> 00:02:38.520


56
00:02:38.520 --> 00:02:42.000
where the list is in your computer memory, in x.

57
00:02:42.000 --> 00:02:51.680
This means that x does not actually contain all the list elements, it rather contains a reference to the list.

58
00:02:51.680 --> 00:02:58.920
For basic operations, the difference is not that important, but it becomes more so when you start copying lists.

59
00:02:58.920 --> 00:03:02.200
Let me clarify this with an example.

60
00:03:02.200 --> 00:03:02.200


61
00:03:02.200 --> 00:03:02.200


62
00:03:02.200 --> 00:03:07.840
Let's store the list x as a new variable y, by simply using the equals sign.

63
00:03:07.840 --> 00:03:07.840


64
00:03:07.840 --> 00:03:08.840


65
00:03:08.840 --> 00:03:13.600
Let's now change the element with index one in the list y, like this.

66
00:03:13.600 --> 00:03:13.600


67
00:03:13.600 --> 00:03:14.720


68
00:03:14.720 --> 00:03:21.720
The funky thing is that if you now check out x again, also here the second element was changed.

69
00:03:21.720 --> 00:03:21.720


70
00:03:21.720 --> 00:03:21.720


71
00:03:21.720 --> 00:03:25.600
That's because when you copied x to y

72
00:03:25.600 --> 00:03:26.800
with the equals sign,

73
00:03:26.800 --> 00:03:26.800


74
00:03:26.800 --> 00:03:31.960
you copied the reference to the list, not the actual values themselves.

75
00:03:31.960 --> 00:03:31.960


76
00:03:31.960 --> 00:03:31.960


77
00:03:31.960 --> 00:03:38.560
When you're updating an element the list, it's one and the same list in the computer memory your changing.

78
00:03:38.560 --> 00:03:45.520
Both x and y point to this list, so the update is visible from both variables.

79
00:03:45.520 --> 00:03:45.520


80
00:03:45.520 --> 00:03:46.280


81
00:03:46.280 --> 00:03:50.360
If you want to create a list y that points to a new list in the memory

82
00:03:50.360 --> 00:03:51.760
with the same values,

83
00:03:51.760 --> 00:03:51.760


84
00:03:51.760 --> 00:03:54.640
you'll need to use something else than the equals sign.

85
00:03:54.640 --> 00:03:57.440
You can use the list function,

86
00:03:57.440 --> 00:03:57.440


87
00:03:57.440 --> 00:04:02.920
like this, or use slicing to select all list elements explicitly.

88
00:04:02.920 --> 00:04:02.920


89
00:04:02.920 --> 00:04:03.800


90
00:04:03.800 --> 00:04:04.360
If you now

91
00:04:04.360 --> 00:04:04.360


92
00:04:04.360 --> 00:04:07.960
make a change to the list y points to, x is not affected.

93
00:04:07.960 --> 00:04:07.960


94
00:04:07.960 --> 00:04:07.960


95
00:04:07.960 --> 00:04:11.720
If this was a bit too much to take in, don't worry.

96
00:04:11.720 --> 00:04:11.720


97
00:04:11.720 --> 00:04:11.720


98
00:04:11.720 --> 00:04:18.200
The exercises will help you understand list manipulation and the subtle inner workings of lists.

99
00:04:18.200 --> 00:04:23.280
I'm sure you'll do great!

