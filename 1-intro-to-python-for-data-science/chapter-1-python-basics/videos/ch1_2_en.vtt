WEBVTT

1
00:00:00.000 --> 00:00:04.880
Well done and welcome back!

2
00:00:04.880 --> 00:00:07.520
It's clear that Python is a great calculator.

3
00:00:07.520 --> 00:00:13.280
If you want to do more complex calculations though, you will want to "save" values while you're coding along.

4
00:00:13.280 --> 00:00:13.280


5
00:00:13.280 --> 00:00:13.280


6
00:00:13.280 --> 00:00:19.200
You can do this by defining a variable, with a specific, case-sensitive name.

7
00:00:19.200 --> 00:00:26.400
Once you create (or declare) such a variable, you can later call up its value by typing the variable name.

8
00:00:26.400 --> 00:00:26.440


9
00:00:26.440 --> 00:00:26.440


10
00:00:26.440 --> 00:00:30.160
Suppose you measure your height and weight, in metric units:

11
00:00:30.160 --> 00:00:35.800
you are 1-point-79 meters tall, and weigh 68-point-7 kilograms.

12
00:00:35.800 --> 00:00:42.960
You can assign these values to two variables, named height and weight, with an equals sign:

13
00:00:42.960 --> 00:00:42.960


14
00:00:42.960 --> 00:00:43.880
If you now type

15
00:00:43.880 --> 00:00:45.600
the name of the variable, height,

16
00:00:45.600 --> 00:00:45.600


17
00:00:45.600 --> 00:00:51.480
Python looks for the variable name, retrieves its value, and prints it out.

18
00:00:51.480 --> 00:00:51.480


19
00:00:51.480 --> 00:00:51.480


20
00:00:51.480 --> 00:00:55.880
Let's now calculate the Body Mass Index, or BMI, which is

21
00:00:55.880 --> 00:01:00.880
calculated as follows, with weight in kilograms and height in meters.

22
00:01:00.880 --> 00:01:07.840
You can do this with the actual values, but you can just as well use the variables height and weight, like in here.

23
00:01:07.840 --> 00:01:14.400
Every time you type the variable's name, you are asking Python to change it with the actual value of the variable.

24
00:01:14.400 --> 00:01:18.720
weight corresponds to 68-point-7, and height to 1-point-79.

25
00:01:18.720 --> 00:01:19.560


26
00:01:19.560 --> 00:01:19.560


27
00:01:19.560 --> 00:01:26.000
Finally, this version has Python store the result in a new variable, bmi.

28
00:01:26.000 --> 00:01:30.400
bmi now contains the same value as the one you calculated earlier.

29
00:01:30.400 --> 00:01:30.400


30
00:01:30.400 --> 00:01:31.320


31
00:01:31.320 --> 00:01:34.240
In Python, variables are used all the time.

32
00:01:34.240 --> 00:01:36.760
They help to make your code reproducible.

33
00:01:36.760 --> 00:01:37.600


34
00:01:37.600 --> 00:01:37.600


35
00:01:37.600 --> 00:01:43.000
Suppose the code to create the height, weight and bmi variable are in a script, like this.

36
00:01:43.000 --> 00:01:45.960
If you now want to recalculate the bmi for another weight,

37
00:01:45.960 --> 00:01:45.960


38
00:01:45.960 --> 00:01:46.360
you can

39
00:01:46.360 --> 00:01:51.040
simply change the declaration of the weight variable, and rerun the script.

40
00:01:51.040 --> 00:01:56.560
The bmi changes accordingly, because the value of the variable weight has changed as well.

41
00:01:56.560 --> 00:01:56.560


42
00:01:56.560 --> 00:01:56.560


43
00:01:56.560 --> 00:02:02.480
So far, we've only worked with numerical values, such as height and weight.

44
00:02:02.480 --> 00:02:02.480


45
00:02:02.480 --> 00:02:03.280


46
00:02:03.280 --> 00:02:07.000
In Python, these numbers all have a specific type.

47
00:02:07.000 --> 00:02:09.840
You can check out the type of a value with the type function.

48
00:02:09.840 --> 00:02:17.320
To see the type of our bmi value, simply write type and then bmi inside parentheses.

49
00:02:17.320 --> 00:02:21.360
You can see that it's a float, which is python's way of representing a real

50
00:02:21.360 --> 00:02:25.480
number, so a number which can have both an integer part and a fractional part.

51
00:02:25.480 --> 00:02:30.400
Python also has a type for integers: int, like this example.

52
00:02:30.400 --> 00:02:30.400


53
00:02:30.400 --> 00:02:30.400


54
00:02:30.400 --> 00:02:34.600
To do data science, you'll need more than ints and floats, though.

55
00:02:34.600 --> 00:02:34.600


56
00:02:34.600 --> 00:02:34.600


57
00:02:34.600 --> 00:02:37.840
Python features tons of other data types.

58
00:02:37.840 --> 00:02:40.960
The most common ones are strings and booleans.

59
00:02:40.960 --> 00:02:41.360


60
00:02:41.360 --> 00:02:41.360


61
00:02:41.360 --> 00:02:44.640
A string is Python's way to represent text.

62
00:02:44.640 --> 00:02:50.280
You can use both double and single quotes to build a string, as you can see from these examples.

63
00:02:50.280 --> 00:02:55.440
If you print the type of the last variable here, you see that it's str, short for string.

64
00:02:55.440 --> 00:02:55.440


65
00:02:55.440 --> 00:02:55.440


66
00:02:55.440 --> 00:03:00.240
The Boolean is a type that can either be True or False.

67
00:03:00.240 --> 00:03:03.600
You can think of it as 'Yes' and 'No' in everyday language.

68
00:03:03.600 --> 00:03:08.640
Booleans will be very useful in the future, to perform filtering operations on your data for example.

69
00:03:08.640 --> 00:03:08.640


70
00:03:08.640 --> 00:03:08.640


71
00:03:08.640 --> 00:03:12.360
There's something special about Python data types.

72
00:03:12.360 --> 00:03:12.360


73
00:03:12.360 --> 00:03:12.360


74
00:03:12.360 --> 00:03:19.040
Have a look at this line of code, that sums two integers, and then this line of code, that sums two strings.

75
00:03:19.040 --> 00:03:19.040


76
00:03:19.040 --> 00:03:19.040


77
00:03:19.040 --> 00:03:25.480
For the integers, the values were summed, while for the strings, the strings were pasted together.

78
00:03:25.480 --> 00:03:30.200
The plus operator behaved differently for different data types.

79
00:03:30.200 --> 00:03:36.560
This is a general principle: how the code behaves depends on the types you're working with.

80
00:03:36.560 --> 00:03:36.560


81
00:03:36.560 --> 00:03:36.560


82
00:03:36.560 --> 00:03:44.360
In the exercises that follow, you'll create your first variables and experiment with some of Python's data types.

83
00:03:44.360 --> 00:03:48.520
I'll see you in the next video to explain all about lists.

84
00:03:48.520 --> 00:03:48.520


85
00:03:48.520 --> 00:03:48.520


86
00:03:48.520 --> 00:03:51.840
Let's get you coding and I can't wait to see you in the

87
00:03:51.840 --> 00:04:00.360
next chapter where you'll build even more awesome python charts.

