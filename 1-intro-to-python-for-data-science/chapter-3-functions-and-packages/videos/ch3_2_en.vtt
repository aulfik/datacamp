WEBVTT

1
00:00:00.000 --> 00:00:04.320
Built-in functions are only

2
00:00:04.320 --> 00:00:04.360


3
00:00:04.360 --> 00:00:06.360
one part of the Python story.

4
00:00:06.360 --> 00:00:10.520
You already know about functions such as max, to get the maximum

5
00:00:10.520 --> 00:00:15.240
of a list, len, to get the length of a list or a string, and so on.

6
00:00:15.240 --> 00:00:22.480
But what about other basic things, such getting the index of a specific element in the list, or reversing a list?

7
00:00:22.480 --> 00:00:27.560
You can look very hard for built-in functions that do this, but you won't find them.

8
00:00:27.560 --> 00:00:27.560


9
00:00:27.560 --> 00:00:27.600


10
00:00:27.600 --> 00:00:32.360
In the past exercises, you've already created a bunch of variables.

11
00:00:32.360 --> 00:00:39.040
Among other Python types, you've created strings, floats and lists, like the ones you see here.

12
00:00:39.040 --> 00:00:44.440
Each one of these values or data structures are so-called Python objects.

13
00:00:44.440 --> 00:00:52.320
This string is an object, this float is an object, but this list is also, you got it, an object.

14
00:00:52.320 --> 00:00:55.520
These objects have a specific type, that you already know:

15
00:00:55.520 --> 00:00:55.880


16
00:00:55.880 --> 00:00:58.520
string, float, and list, and of

17
00:00:58.520 --> 00:01:05.760
course they represent the values you gave them, such as "liz", 1-point-73 and an entire list.

18
00:01:05.760 --> 00:01:12.920
But in addition to this, Python objects also come with a bunch of so-called "methods".

19
00:01:12.920 --> 00:01:18.640
You can think of methods as functions that "belong to" Python objects.

20
00:01:18.640 --> 00:01:21.760
A Python object of type string has methods,

21
00:01:21.760 --> 00:01:21.840


22
00:01:21.840 --> 00:01:24.960
such as capitalize and replace,

23
00:01:24.960 --> 00:01:30.640
but also objects of type float and list have specific methods depending on the type.

24
00:01:30.640 --> 00:01:31.680


25
00:01:31.680 --> 00:01:31.680


26
00:01:31.680 --> 00:01:35.640
Enough for the theory now; let's try to use a method!

27
00:01:35.640 --> 00:01:35.640


28
00:01:35.640 --> 00:01:35.640


29
00:01:35.640 --> 00:01:39.880
Suppose you want to get the index of the string "mom" in the fam list.

30
00:01:39.880 --> 00:01:46.320
fam is an Python object with the type list, and has a method named index.

31
00:01:46.320 --> 00:01:51.680
To call the method, you use the dot notation, like this.

32
00:01:51.680 --> 00:01:56.880
The only input is the string "mom", the element you want to get the index for.

33
00:01:56.880 --> 00:01:56.880


34
00:01:56.880 --> 00:01:56.880


35
00:01:56.880 --> 00:02:03.560
Python returns 4, which indeed is the index of the string "mom".

36
00:02:03.560 --> 00:02:08.960
I called the index method "on" the fam list here, and the output was 4.

37
00:02:08.960 --> 00:02:17.680
Similarly, I can use the count method on the fam list to count the number of times 1-point-73 occurs in the list.

38
00:02:17.680 --> 00:02:17.680


39
00:02:17.680 --> 00:02:17.680


40
00:02:17.680 --> 00:02:24.640
Python gives me 1, which makes sense, because only liz is 1-point-73 meters tall.

41
00:02:24.640 --> 00:02:24.640


42
00:02:24.640 --> 00:02:25.680


43
00:02:25.680 --> 00:02:31.120
But lists are not the only Python objects that have methods associated.

44
00:02:31.120 --> 00:02:35.000
Also floats, integers, booleans and strings

45
00:02:35.000 --> 00:02:35.000


46
00:02:35.000 --> 00:02:38.720
are Python objects that have specific methods associated with them.

47
00:02:38.720 --> 00:02:44.600
Take the variable sister for example, that represents a string.

48
00:02:44.600 --> 00:02:44.600


49
00:02:44.600 --> 00:02:44.600


50
00:02:44.600 --> 00:02:49.040
You can call the method capitalize on sister, without any inputs.

51
00:02:49.040 --> 00:02:52.800
It returns a string where the first letter is capitalized now.

52
00:02:52.800 --> 00:02:52.800


53
00:02:52.800 --> 00:02:53.520


54
00:02:53.520 --> 00:02:57.960
Or what if you want to replace some parts of the string with other parts?

55
00:02:57.960 --> 00:02:58.640
Not a problem.

56
00:02:58.640 --> 00:03:04.080
Just call the method replace on sister, with two appropriate inputs.

57
00:03:04.080 --> 00:03:04.080


58
00:03:04.080 --> 00:03:04.080


59
00:03:04.080 --> 00:03:09.200
In the output, "z" is replaced with "sa".

60
00:03:09.200 --> 00:03:09.200


61
00:03:09.200 --> 00:03:09.200


62
00:03:09.200 --> 00:03:17.320
To be absolutely clear: in Python, everything is an object, and each object has specific methods associated.

63
00:03:17.320 --> 00:03:25.040
Depending on the type of the object, list, string, float, whatever, the available methods are different.

64
00:03:25.040 --> 00:03:34.000
A string object like sister has a replace method, but a list like fam doesn't have this, as you can see from this error.

65
00:03:34.000 --> 00:03:34.000


66
00:03:34.000 --> 00:03:34.000


67
00:03:34.000 --> 00:03:39.520
Objects of different types can have methods with the same name: Take the index method.

68
00:03:39.520 --> 00:03:43.080
It's available for both strings and lists.

69
00:03:43.080 --> 00:03:47.200
If you call it on a string, you get the index of the letters in the

70
00:03:47.200 --> 00:03:52.560
string; If you call it on a list, you get the index of the element in the list.

71
00:03:52.560 --> 00:03:58.320
This means that, depending on the type of the object, the methods behave differently.

72
00:03:58.320 --> 00:03:58.320


73
00:03:58.320 --> 00:03:58.320


74
00:03:58.320 --> 00:04:02.000
Before I unleash you on some exercises on methods,

75
00:04:02.000 --> 00:04:02.120


76
00:04:02.120 --> 00:04:04.080
there's one more thing I want to tell you.

77
00:04:04.080 --> 00:04:08.120
Some methods can change the objects they are called on.

78
00:04:08.120 --> 00:04:12.040
Let's retake the fam list, and call the append method on it.

79
00:04:12.040 --> 00:04:16.320
As the input, we pass a string we want to add to the list.

80
00:04:16.320 --> 00:04:16.320


81
00:04:16.320 --> 00:04:16.320


82
00:04:16.320 --> 00:04:20.600
Python doesn't generate an output, but if we check the fam

83
00:04:20.600 --> 00:04:24.360
list again, we see that it has been extended with the string "me".

84
00:04:24.360 --> 00:04:25.200


85
00:04:25.200 --> 00:04:25.200


86
00:04:25.200 --> 00:04:28.720
Let's do this again, this time to add my height to the list.

87
00:04:28.720 --> 00:04:28.720


88
00:04:28.720 --> 00:04:29.280


89
00:04:29.280 --> 00:04:31.440
Again, the fam list was extended.

90
00:04:31.440 --> 00:04:31.440


91
00:04:31.440 --> 00:04:31.440


92
00:04:31.440 --> 00:04:35.800
This is pretty cool, because you can write very concise code to

93
00:04:35.800 --> 00:04:40.320
update your data structures on the fly, but it can also be pretty dangerous.

94
00:04:40.320 --> 00:04:47.240
Some method calls don't change the object they're called on, while others do, so watch out.

95
00:04:47.240 --> 00:04:47.240


96
00:04:47.240 --> 00:04:47.280


97
00:04:47.280 --> 00:04:49.640
Let's take a step back here and summarize this.

98
00:04:49.640 --> 00:04:55.200
you have Python functions, like type, max and round, that you can call like this.

99
00:04:55.200 --> 00:04:59.720
There's also methods, which are functions that are specific to Python objects.

100
00:04:59.720 --> 00:05:03.120
Depending on the type of the Python object you're dealing with,

101
00:05:03.120 --> 00:05:06.440
you'll be able to use different methods and they behave differently.

102
00:05:06.440 --> 00:05:12.040
You can call methods on the objects with the dot notation, like this, for example.

103
00:05:12.040 --> 00:05:12.040


104
00:05:12.040 --> 00:05:12.040


105
00:05:12.040 --> 00:05:16.440
There's much more to tell about Python objects, methods and how Python

106
00:05:16.440 --> 00:05:17.240
works internally,

107
00:05:17.240 --> 00:05:17.240


108
00:05:17.240 --> 00:05:20.160
but for now, let's stick to what I've talked about here.

109
00:05:20.160 --> 00:05:29.760
It's time to get some exercises and add methods to your evergrowing skillset!

