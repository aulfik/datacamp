WEBVTT

1
00:00:00.000 --> 00:00:05.480
You are doing SO well.

2
00:00:05.480 --> 00:00:05.480


3
00:00:05.480 --> 00:00:05.480


4
00:00:05.480 --> 00:00:10.680
If you use a dice to determine your next step, you can call this a random step.

5
00:00:10.680 --> 00:00:15.000
What if you use a dice 100 times to determine your next step?

6
00:00:15.000 --> 00:00:19.800
You would have a succession of random steps, or in other words, a random walk.

7
00:00:19.800 --> 00:00:20.320


8
00:00:20.320 --> 00:00:20.320


9
00:00:20.320 --> 00:00:22.720
This is a well known concept in science.

10
00:00:22.720 --> 00:00:29.480
For example, the path traced by a molecule as it travels in a liquid or a gas can be modeled as a random walk.

11
00:00:29.480 --> 00:00:32.200
The financial status of a gambler is another example.

12
00:00:32.200 --> 00:00:32.960


13
00:00:32.960 --> 00:00:32.960


14
00:00:32.960 --> 00:00:39.080
To record every step in your random walk, you need to learn how to gradually build a list with a for loop.

15
00:00:39.080 --> 00:00:39.880


16
00:00:39.880 --> 00:00:39.880


17
00:00:39.880 --> 00:00:41.440
Have a look at this code.

18
00:00:41.440 --> 00:00:44.840
It keeps the outcomes for playing a game of heads or tails ten

19
00:00:44.840 --> 00:00:50.200
times, with the random number generator we coded up in the previous video.

20
00:00:50.200 --> 00:00:57.760
After importing numpy and setting a seed for the random number generator, we initialize an empty list "outcomes".

21
00:00:57.760 --> 00:00:57.760


22
00:00:57.760 --> 00:00:57.760


23
00:00:57.760 --> 00:01:01.880
Next, we build a for loop that should run ten times.

24
00:01:01.880 --> 00:01:08.760
We can do this with the range() function, that generates a list of numbers that you can use to iterate over.

25
00:01:08.760 --> 00:01:14.520
Inside this for loop, we generate a random integer coin that's either zero or one.

26
00:01:14.520 --> 00:01:17.960
Zero corresponds to heads, 1 to tails.

27
00:01:17.960 --> 00:01:17.960


28
00:01:17.960 --> 00:01:18.000


29
00:01:18.000 --> 00:01:22.840
If coin is zero, we append the string heads to the list.

30
00:01:22.840 --> 00:01:25.880
Else, we append the string tails.

31
00:01:25.880 --> 00:01:32.000
In both cases, we do this with the append method, which you learned about in the intro course.

32
00:01:32.000 --> 00:01:32.000


33
00:01:32.000 --> 00:01:32.000


34
00:01:32.000 --> 00:01:37.160
Finally, we print the outcomes list we've built up in these 10 iterations.

35
00:01:37.160 --> 00:01:38.040


36
00:01:38.040 --> 00:01:38.040


37
00:01:38.040 --> 00:01:43.160
If we run this script, eventually a list with 10 strings will be printed out.

38
00:01:43.160 --> 00:01:50.160
This list is random, but it's not a random walk, because the items in the list are not based on the previous ones.

39
00:01:50.160 --> 00:01:52.280
It's just a bunch of random steps.

40
00:01:52.280 --> 00:01:52.280


41
00:01:52.280 --> 00:01:52.960


42
00:01:52.960 --> 00:01:54.920
You could turn this example into a

43
00:01:54.920 --> 00:02:00.680
random walk by tracking the -total- number of tails while you're simulating the game.

44
00:02:00.680 --> 00:02:00.680


45
00:02:00.680 --> 00:02:00.680


46
00:02:00.680 --> 00:02:05.800
In this case, you start by creating a list, tails, that already

47
00:02:05.800 --> 00:02:11.560
contains the number 0, because at the start, you haven't thrown any tails.

48
00:02:11.560 --> 00:02:17.160
Then you again start a for loop that runs 10 times, using the range function.

49
00:02:17.160 --> 00:02:17.160


50
00:02:17.160 --> 00:02:17.160


51
00:02:17.160 --> 00:02:20.280
In there, you again generate a random number.

52
00:02:20.280 --> 00:02:24.320
Instead of the if-else structure, you can simplify things.

53
00:02:24.320 --> 00:02:29.000
If coin is 0, so heads, the number of tails you've thrown shouldn't change.

54
00:02:29.000 --> 00:02:33.280
If a 1 is generated, the number of tails should be incremented with 1.

55
00:02:33.280 --> 00:02:41.040
This means that you can simply add coin to the previous number of tails, and add this count to the list with append.

56
00:02:41.040 --> 00:02:41.040


57
00:02:41.040 --> 00:02:41.040


58
00:02:41.040 --> 00:02:45.240
Finally, you again print the list tails.

59
00:02:45.240 --> 00:02:49.960
After running this script, a list with 11 elements will be printed out.

60
00:02:49.960 --> 00:02:54.040
The final element in this list tells you how often tails was thrown.

61
00:02:54.040 --> 00:02:54.840


62
00:02:54.840 --> 00:02:54.840


63
00:02:54.840 --> 00:03:00.120
If you compare the output of the first script to the output of the second script, you

64
00:03:00.120 --> 00:03:06.800
can see that the numbers in the tails list are incremented by one each time you threw tails.

65
00:03:06.800 --> 00:03:12.040
This is exactly how a bunch of random steps are converted into a random walk.

66
00:03:12.040 --> 00:03:12.040


67
00:03:12.040 --> 00:03:12.040


68
00:03:12.040 --> 00:03:20.760
Head over to the exercises to apply this new knowledge on your own case study!

