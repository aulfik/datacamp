WEBVTT

1
00:00:00.000 --> 00:00:05.400
There's one killer data structure out there that we haven't

2
00:00:05.400 --> 00:00:10.320
covered up to now when it comes to looping: the Pandas DataFrame.

3
00:00:10.320 --> 00:00:10.320


4
00:00:10.320 --> 00:00:10.360


5
00:00:10.360 --> 00:00:14.560
Let's go over the data on the brics countries one last time.

6
00:00:14.560 --> 00:00:18.240
These lines of code import it from the CSV file brics.

7
00:00:18.240 --> 00:00:19.440
csv.

8
00:00:19.440 --> 00:00:23.560
You can see its contents on the top right here, so you can follow along.

9
00:00:23.560 --> 00:00:23.560


10
00:00:23.560 --> 00:00:23.560


11
00:00:23.560 --> 00:00:28.160
If a Pandas DataFrame were to function the same way as a 2D NumPy

12
00:00:28.160 --> 00:00:33.880
array, then maybe a basic for loop like this, to print out each row, could work.

13
00:00:33.880 --> 00:00:36.160
Let's see what the output is.

14
00:00:36.160 --> 00:00:36.160


15
00:00:36.160 --> 00:00:36.200


16
00:00:36.200 --> 00:00:38.920
Well, this was rather unexpected.

17
00:00:38.920 --> 00:00:40.800
We simply got the column names.

18
00:00:40.800 --> 00:00:44.400
Also interesting, but not exactly what we want.

19
00:00:44.400 --> 00:00:49.640
In Pandas, you have to mention explicitly that you want to iterate over the rows.

20
00:00:49.640 --> 00:00:49.640


21
00:00:49.640 --> 00:00:49.640


22
00:00:49.640 --> 00:00:55.120
You do this by calling the iterrows method on the brics country, thus specifying another

23
00:00:55.120 --> 00:00:56.680
"sequence":

24
00:00:56.680 --> 00:00:56.680


25
00:00:56.680 --> 00:01:01.640
The iterrows method looks at the DataFrame, and on each iteration generates

26
00:01:01.640 --> 00:01:08.240
two pieces of data: the label of the row and then the actual data in the row as a Pandas Series.

27
00:01:08.240 --> 00:01:16.040
Let's change the rest of the for loop to reflect this change: we store the row label as lab, and the row data as row.

28
00:01:16.040 --> 00:01:23.120
To understand what's happening, let's print lab and row seperately.

29
00:01:23.120 --> 00:01:23.120


30
00:01:23.120 --> 00:01:23.120


31
00:01:23.120 --> 00:01:29.760
In the first iteration, lab is BR, and row is this entire Pandas Series.

32
00:01:29.760 --> 00:01:35.120
Because this row variable on each iteration is a Series, you can easily select

33
00:01:35.120 --> 00:01:40.400
additional information from it using the subsetting techniques you learned about earlier.

34
00:01:40.400 --> 00:01:40.400


35
00:01:40.400 --> 00:01:40.400


36
00:01:40.400 --> 00:01:45.240
Suppose you only want to print out the capital on each iteration: let's

37
00:01:45.240 --> 00:01:50.680
change the print statement as follows, printing the label and the capital together.

38
00:01:50.680 --> 00:01:53.520
You can take things further than simple printouts, though.

39
00:01:53.520 --> 00:01:54.120


40
00:01:54.120 --> 00:01:54.120


41
00:01:54.120 --> 00:01:57.280
Let's add a new column to the brics DataFrame, named

42
00:01:57.280 --> 00:02:01.840
name_length, containing the number of characters in the country's name.

43
00:02:01.840 --> 00:02:07.160
To do this, we'll need to blend together a lot of the things we've learned.

44
00:02:07.160 --> 00:02:10.240
It's pretty advanced stuff, so try to stay with me here.

45
00:02:10.240 --> 00:02:10.240


46
00:02:10.240 --> 00:02:10.240


47
00:02:10.240 --> 00:02:17.480
The specification of the for loop can be the same, because we'll need both the row label and the row data.

48
00:02:17.480 --> 00:02:18.360


49
00:02:18.360 --> 00:02:18.360


50
00:02:18.360 --> 00:02:25.120
Next, we can calculate the length of each country name by selecting the country column from

51
00:02:25.120 --> 00:02:30.240
row, and then passing it to the len() function, that determines the number of characters in a string.

52
00:02:30.240 --> 00:02:31.200


53
00:02:31.200 --> 00:02:31.200


54
00:02:31.200 --> 00:02:38.560
Finally, we'll have to add this new information to a new column, name_length, at the appropriate location.

55
00:02:38.560 --> 00:02:41.160
I used loc here, which is label-based.

56
00:02:41.160 --> 00:02:48.880
To see whether we coded things correctly, I'm adding a printout of brics after the for loop, so without indentation.

57
00:02:48.880 --> 00:02:49.920


58
00:02:49.920 --> 00:02:49.920


59
00:02:49.920 --> 00:02:56.440
Running this scripts shows that it worked: there's a new column in there with the length of the country names.

60
00:02:56.440 --> 00:03:02.880
Nice, but not especially efficient, because you're creating a Series object on every iteration.

61
00:03:02.880 --> 00:03:07.560
For this small DataFrame that doesn't matter, but if you're doing funky

62
00:03:07.560 --> 00:03:12.880
stuff on a ginormous dataset, this loss in efficiency can become problematic.

63
00:03:12.880 --> 00:03:12.880


64
00:03:12.880 --> 00:03:13.520


65
00:03:13.520 --> 00:03:18.280
A way better approach if you want to calculate an entire DataFrame column by

66
00:03:18.280 --> 00:03:23.880
applying a function on a particular column in an element-wise fashion, is apply().

67
00:03:23.880 --> 00:03:26.240
In this case, you don't even need a for loop.

68
00:03:26.240 --> 00:03:27.800
This is how it's done.

69
00:03:27.800 --> 00:03:27.800


70
00:03:27.800 --> 00:03:27.800


71
00:03:27.800 --> 00:03:32.480
Basically, you're selecting the country column from the brics

72
00:03:32.480 --> 00:03:36.840
DataFrame, and then, on this column, you apply the len function.

73
00:03:36.840 --> 00:03:40.960
Apply calls the len function with each country name as input and

74
00:03:40.960 --> 00:03:45.960
produces a new array, that you can easily store as a new column, "name_length".

75
00:03:45.960 --> 00:03:50.760
This is way more efficient, and also easier to read, if you ask me.

76
00:03:50.760 --> 00:03:50.760


77
00:03:50.760 --> 00:03:50.760


78
00:03:50.760 --> 00:03:55.160
So, I've told you how to iterate DataFrames with a for

79
00:03:55.160 --> 00:03:58.800
loop, and how to do vectorized operations with the apply function.

80
00:03:58.800 --> 00:04:03.600
These skills will become very useful once you start transforming your own datasets!

81
00:04:03.600 --> 00:04:03.600


82
00:04:03.600 --> 00:04:03.600


83
00:04:03.600 --> 00:04:06.280
Get straight to it in the exercises.

84
00:04:06.280 --> 00:04:14.520
And then I'll see you back here for your awesome capstone project where you'll do some hacker statistics.

