WEBVTT

1
00:00:00.000 --> 00:00:09.640
In the previous chapter, you've discovered the if-elif-else construct, a way to alter the flow of your scripts.

2
00:00:09.640 --> 00:00:13.440
As soon as Python encounters an if statement, it checks the condition.

3
00:00:13.440 --> 00:00:13.440


4
00:00:13.440 --> 00:00:14.000


5
00:00:14.000 --> 00:00:18.360
When this condition is True, the corresponding code is executed.

6
00:00:18.360 --> 00:00:18.360


7
00:00:18.360 --> 00:00:18.360


8
00:00:18.360 --> 00:00:25.600
If the conditions evaluates to False, and if there are elif and else statements, Python continues the search.

9
00:00:25.600 --> 00:00:29.360
Anyways, Python goes through this piece of code only once.

10
00:00:29.360 --> 00:00:29.760


11
00:00:29.760 --> 00:00:29.800


12
00:00:29.800 --> 00:00:33.400
After that, Python heads over to the next command in the script.

13
00:00:33.400 --> 00:00:33.400


14
00:00:33.400 --> 00:00:34.320


15
00:00:34.320 --> 00:00:42.200
The while loop is somewhat similar to an if statement: it executes the code inside if the condition is True.

16
00:00:42.200 --> 00:00:47.080
However, as opposed to the if statement, the while loop will continue

17
00:00:47.080 --> 00:00:52.240
to execute this code over and over again as long as the condition is true.

18
00:00:52.240 --> 00:00:52.240


19
00:00:52.240 --> 00:00:53.360


20
00:00:53.360 --> 00:00:58.840
The syntax of a while loop is very similar to the if statement, as you can see here.

21
00:00:58.840 --> 00:00:58.840


22
00:00:58.840 --> 00:00:58.840


23
00:00:58.840 --> 00:01:03.360
The while loop is not that common, but in some cases it can be very useful.

24
00:01:03.360 --> 00:01:08.840
As example, suppose you're numerically calculating a model based on your data.

25
00:01:08.840 --> 00:01:12.600
This typically involves taking the same steps over and over again,

26
00:01:12.600 --> 00:01:18.320
until the error between your model and your data is below some boundary.

27
00:01:18.320 --> 00:01:22.360
When you can reformulate the problem as 'repeating an action until

28
00:01:22.360 --> 00:01:26.720
a particular condition is met', a while loop is often the way to go.

29
00:01:26.720 --> 00:01:26.720


30
00:01:26.720 --> 00:01:27.600


31
00:01:27.600 --> 00:01:35.320
Say that we start with an error of fifty and that our fancy algorithm divides the error by four on each run.

32
00:01:35.320 --> 00:01:39.880
We want to keep going until the error is no longer above 1.

33
00:01:39.880 --> 00:01:39.880


34
00:01:39.880 --> 00:01:39.880


35
00:01:39.880 --> 00:01:45.680
Now heading over to the script, we start by adding the error we start with, 50.

36
00:01:45.680 --> 00:01:48.520
Next, we write a while loop.

37
00:01:48.520 --> 00:01:57.960
In the condition part, we write error > 1, so that the while loop executes again as long as the error is above 1.

38
00:01:57.960 --> 00:02:03.200
Inside the code, we divide the error by four and update the error variable.

39
00:02:03.200 --> 00:02:09.800
This kind of simulates our fancy algorithm that divides the error by four on every run.

40
00:02:09.800 --> 00:02:13.200
Next, we also print this error.

41
00:02:13.200 --> 00:02:18.000
Let's go through what happens if you actually run this script, step by step.

42
00:02:18.000 --> 00:02:18.000


43
00:02:18.000 --> 00:02:18.800


44
00:02:18.800 --> 00:02:25.560
On the first run, the error is 50, so the while condition is True and the corresponding code is executed.

45
00:02:25.560 --> 00:02:29.320
The error is divided by four and printed out: 12.

46
00:02:29.320 --> 00:02:29.720
5.

47
00:02:29.720 --> 00:02:29.720


48
00:02:29.720 --> 00:02:30.480


49
00:02:30.480 --> 00:02:36.920
Now, Python heads back to the condition of the while loop, with error equal to 12.

50
00:02:36.920 --> 00:02:37.920
5.

51
00:02:37.920 --> 00:02:41.560
Again, the condition is True, and the code is executed.

52
00:02:41.560 --> 00:02:44.440
The Error is divided by 4 and printed out.

53
00:02:44.440 --> 00:02:45.640
Now the error is 3.

54
00:02:45.640 --> 00:02:49.880
125 and Python heads back to the while condition.

55
00:02:49.880 --> 00:02:49.880


56
00:02:49.880 --> 00:02:49.880


57
00:02:49.880 --> 00:02:50.200
3.

58
00:02:50.200 --> 00:02:56.480
125 is still greater than 1 so the corresponding code is executed again.

59
00:02:56.480 --> 00:03:03.480
Now, the error is only zero point seven eight so on, as you can see from the printout.

60
00:03:03.480 --> 00:03:03.480


61
00:03:03.480 --> 00:03:03.480


62
00:03:03.480 --> 00:03:09.240
Once more, Python heads over to the while condition, but this time, the condition is False.

63
00:03:09.240 --> 00:03:14.480
The code in the while loop is not executed anymore, and Python moves on.

64
00:03:14.480 --> 00:03:14.480


65
00:03:14.480 --> 00:03:14.480


66
00:03:14.480 --> 00:03:19.920
Notice that inside this while loop, this update of error is

67
00:03:19.920 --> 00:03:24.600
crucial: the error had to go down to become lower than 1 at some point.

68
00:03:24.600 --> 00:03:24.600


69
00:03:24.600 --> 00:03:25.600


70
00:03:25.600 --> 00:03:30.160
Suppose that we comment out these updates of the error value, and run the script again.

71
00:03:30.160 --> 00:03:37.080
The error isn't updated, so the condition is always True and the while loop will go on forever.

72
00:03:37.080 --> 00:03:41.160
On DataCamp, this will cause your session to be disconnected.

73
00:03:41.160 --> 00:03:43.960
If you're making this mistake on your own system, you will have

74
00:03:43.960 --> 00:03:47.960
to interrupt the python program by pressing the control and C keys.

75
00:03:47.960 --> 00:03:47.960


76
00:03:47.960 --> 00:03:47.960


77
00:03:47.960 --> 00:03:51.360
Head over to the exercises to write some while loops

78
00:03:51.360 --> 00:03:56.160
yourself, and be careful: your while loop should stop at some point!

79
00:03:56.160 --> 00:03:59.160
If it doesn't, how will you get back to the next video?

80
00:03:59.160 --> 00:03:59.640
Just kidding.

81
00:03:59.640 --> 00:04:04.680
See you soon.

